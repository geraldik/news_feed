/*
 * This file is generated by jOOQ.
 */
package com.gmail.geraldik.newsfeed.pesristence.tables.records;


import com.gmail.geraldik.newsfeed.pesristence.tables.Comment;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Comment on the news
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record4<Integer, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.comment.id</code>. Comment id
     */
    public CommentRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.id</code>. Comment id
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.comment.commentator</code>. Commentator name
     */
    public CommentRecord setCommentator(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.commentator</code>. Commentator name
     */
    public String getCommentator() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.comment.body</code>. Comment text
     */
    public CommentRecord setBody(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.body</code>. Comment text
     */
    public String getBody() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.comment.item_id</code>. Id of the news to which the comment belongs
     */
    public CommentRecord setItemId(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.comment.item_id</code>. Id of the news to which the comment belongs
     */
    public Integer getItemId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Comment.COMMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Comment.COMMENT.COMMENTATOR;
    }

    @Override
    public Field<String> field3() {
        return Comment.COMMENT.BODY;
    }

    @Override
    public Field<Integer> field4() {
        return Comment.COMMENT.ITEM_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCommentator();
    }

    @Override
    public String component3() {
        return getBody();
    }

    @Override
    public Integer component4() {
        return getItemId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCommentator();
    }

    @Override
    public String value3() {
        return getBody();
    }

    @Override
    public Integer value4() {
        return getItemId();
    }

    @Override
    public CommentRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CommentRecord value2(String value) {
        setCommentator(value);
        return this;
    }

    @Override
    public CommentRecord value3(String value) {
        setBody(value);
        return this;
    }

    @Override
    public CommentRecord value4(Integer value) {
        setItemId(value);
        return this;
    }

    @Override
    public CommentRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(Integer id, String commentator, String body, Integer itemId) {
        super(Comment.COMMENT);

        setId(id);
        setCommentator(commentator);
        setBody(body);
        setItemId(itemId);
    }
}
